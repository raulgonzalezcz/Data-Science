B
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
n <- 10000 # number of dropped needles
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
library("ggplot")
library(tidyverse)
library(ggplot2)
sec <- seq(100, 500, 1000, 10000, 100000)
sec <- seq(100, 500, 1000, 10000)
sec <- seq(100, 5000, 50)
pi_aprox <- function(n){
B = buffon_experiment(n, L, a)
#print("# touching or crossing a line:")
B = B / n
B
#print("# not touching a line:")
#print(1-B)
#print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
}
pies <- lapply(sec, pi_aprox)
plot(sec, pies)
abline(h = 0, v = pi, col = "gray60")
sec <- seq(100, 5000, 50)
pi_aprox <- function(n){
B = buffon_experiment(n, L, a)
#print("# touching or crossing a line:")
B = B / n
B
#print("# not touching a line:")
#print(1-B)
#print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
}
pies <- lapply(sec, pi_aprox)
plot(sec, pies)
library(tidyverse)
library(ggplot2)
L <- 1 # length of needle
x <- 1 # distance between lines
n <- 10000 # number of dropped needles
buffon_experiment <- function(n, L, a) {
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (L/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
}
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
L <- 1 # length of needle
x <- 1 # distance between lines
n <- 10000 # number of dropped needles
buffon_experiment <- function(n, L, a) {
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
}
B = buffon_experiment(n, x, L)
print("# touching or crossing a line:")
B = B / n
B
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
sec <- seq(100, 5000, 50)
pi_aprox <- function(n){
B = buffon_experiment(n, x, L)
#print("# touching or crossing a line:")
B = B / n
B
#print("# not touching a line:")
#print(1-B)
#print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
}
pies <- lapply(sec, pi_aprox)
plot(sec, pies)
ensureCranPkg <- function(pkg) {
if(!suppressWarnings(requireNamespace(pkg, quietly = TRUE))) {
install.packages(pkg)
}
}
#librerias que vamos a utilizar!!!!
ensureCranPkg('devtools')
ensureCranPkg('purrr')
ensureCranPkg('dplyr')
ensureCranPkg('htmlwidgets')
ensureCranPkg('stringr')
ensureCranPkg('rvest')
ensureCranPkg('xml2')
ensureCranPkg('htmltools')
if(!suppressWarnings(requireNamespace('leaflet',quietly = TRUE)) ||
packageVersion('leaflet') < '1.0.2.9006') {
devtools::install_github('rstudio/leaflet')
}
if(!suppressWarnings(requireNamespace('tilegramsR', quietly = TRUE))) {
devtools::install_github('bhaskarvk/tilegramsR')
}
setwd("C:/Users/Raúl/Downloads")
library(dplyr)
library(ggplot2)
msleep <- read.csv("msleep.csv")
#Explicando
dim(msleep)
setwd("C:/Users/Raúl/Desktop/TSIII-Data Science")
msleep <- read.csv("msleep.csv")
msleep <- read.csv("msleep.csv")
msleep
names(msleep)
#Lea el archivo msleep
setwd("C:/Users/Raúl/Desktop/TSIII-Data Science")
msleep <- read.csv("msleep.csv")
msleep
#tipo de cada columna
typeof(names(msleep))
#De un resumen de cada columna.
head(msleep)
#Muestre las columnas name, sleep_rem
col <- c("name", "sleep_rem")
msleep[col,]
msleep[,col]
msleep[,!col]
msleep[,col]
#Muestre todas las columnas excepto awake y bodywt
msleep[, !names(msleep) %in% c("awake", "bodywt")]
#Muestre todas las columnas excepto awake y bodywt
count(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas excepto awake y bodywt
dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas excepto awake y bodywt
msleep[, !names(msleep) %in% c("awake", "bodywt")]
#tipo de cada columna
class(names(msleep))
#Cual es el numero de columnas, cual es el numero de filas,
dim(msleep)
#Cual es el numero de columnas, cual es el numero de filas,
print("Fila, columna")
dim(msleep)
#Cual es el numero de columnas, cual es el numero de filas,
print("Filas, columnas")
#Cual es el numero de columnas, cual es el numero de filas,
print("Filas, columnas" +  dim(msleep))
#Cual es el numero de columnas, cual es el numero de filas,
print("Filas, columnas", dim(msleep))
#Cual es el numero de columnas, cual es el numero de filas,
print(paste("Filas, columnas", dim(msleep)))
#Cual es el numero de columnas, cual es el numero de filas,
print("Filas, columnas", toString(dim(msleep)))
#Cual es el numero de columnas, cual es el numero de filas,
print("Filas, columnas", toString(dim(msleep)))
#Cual es el numero de columnas, cual es el numero de filas,
print(paste("Filas, columnas", dim(msleep)))
#Cual es el numero de columnas, cual es el numero de filas,
print(paste("Filas, columnas", toString(dim(msleep))))
#Cual es el numero de columnas, cual es el numero de filas,
print(paste("Filas, columna:", toString(dim(msleep))))
#Cual es el numero de columnas, cual es el numero de filas,
print(paste("Filas, columnas:", toString(dim(msleep))))
#nombre de columnas
names(msleep)
#tipo de cada columna
class(names(msleep))
#tipo de cada columna
typeof(names(msleep))
#De un resumen de cada columna.
summary(msleep)
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
msleepdf[ , grepl( "sl" , names( df ) ) ]
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
msleep[ , grepl( "sl" , names( msleep ) ) ]
#Muestre todas las columnas cuyo nombre inicie con “b”
msleep[ , grepl( "b" , names( msleep ) ) ]
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep[ , names(msleep) == "name"]
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
msleep[ , select(names(msleep),contains("sl"))]
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
msleep[ , select(msleep,contains("sl"))]
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
select(names(msleep), contains("Sepal"))
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
slepp %>% select(contains("Sepal"))
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
mslepp %>% select(contains("Sepal"))
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
msleep %>% select(contains("Sepal"))
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
msleep %>% select(contains("s"))
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
msleep %>% select(starts_with("sl"))
msleep[ , grepl( "sl" , names( msleep ) ) ]
#Muestre todas las columnas cuyo nombre inicie con “b”
msleep %>% select(starts_with("b"))
msleep[ , grepl( "b" , names( msleep ) ) ]
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt"))
msleep[ , names(msleep) == "name" ]
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt")) | names(msleep) == "name"
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt"), names(msleep) == "name")
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt"))
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt") | equals("name"))
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt") | equal("name"))
#Muestre todos los animales que duerman en total menos de 16
msleep
#Muestre todos los animales que duerman en total menos de 16
names(msleep)
msleep %>% filter(sleep_total<16)
msleep %>% filter(sleep_total<16)
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% filter(select(contains("wt"))
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% filter(select(contains("wt"))
#tipo de cada columna
str(msleep)
typeof(str(msleep))
#tipo de cada columna
str(msleep)
typeof(str(msleep))
typeof(names(msleep))
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt")
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt"))
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt"))
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt"), starts_with("name"))
msleep %>% filter(sleep_total<16)
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
msleep %>% select(contains("wt"), starts_with("name"))
#Muestre los animales que duerman en total al menos 16 y pesen al menos 1
msleep %>% filter(sleep_total>=16, bodywt>=1 )
#Muestre los animales que duerman en total al menos 16 y pesen al menos 1
msleep %>% filter(sleep_total>=16, bodywt>=1 )
#Muestre todos los animales que duerman en total menos de 16
names(msleep)
#Muestre todos los primates o Perissodactyla
msleep
#dim(msleep[, !names(msleep) %in% c("awake", "bodywt")] )
#Muestre todas las columnas cuyo nombre inicie con “sl”
select(msleep, starts_with("sl"))
msleep[ , grepl( "sl" , names( msleep ) ) ]
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
select(msleep, matches("name"))
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
select(msleep, matches("name"), contains(""wt))
#Muestre todas las columnas cuyo nombre sea “name” o contengan “wt”
select(msleep, matches("name"), contains("wt"))
filter(msleep, sleep_total >= 16)
#Muestre los animales que duerman en total al menos 16 y pesen al menos 1
filter(msleep, sleep_total >= 16, bodywt >= 1)
#Muestre todos los primates o Perissodactyla
filter(msleep, order %in% c("Perissodactyla", "Primates"))
#Use el operador pipe en todo lo que sigue.
#Muestre las columnas name y sleep_total, solo las primeras 5 filas
msleep %>%
select(name, sleep_total) %>%
head
#Ordene por la columna “order” (muestre solo los primeros 5 elementos).
msleep %>% arrange(order) %>% head
#Ordene por columna sleep_total
msleep %>% arrange(sleep_total) %>% head
#Ordene por columna sleep_total
msleep %>% arrange(sleep_total)
#Ordene por columna sleep_total
msleep %>% arrange(sleep_total) %>% head(-5)
#Ordene por columna sleep_total
msleep %>% arrange(sleep_total)
#Ordene por columna sleep_total
msleep %>% arrange(sleep_total) %>% head
#Ordene por columna sleep_total
msleep %>% arrange(sleep_total)
#Cual es el animal que duerme mas?: Little brown bat
#Muestre las columnas name, order, sleep_total ordenadas en forma descendente de acuerdo a la columna order, cuando duerman por lo menos 10 (use el operador pipe).
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
filter(sleep_total >= 10)
#Cual es el animal que duerme mas?: Little brown bat
#Muestre las columnas name, order, sleep_total ordenadas en forma descendente de acuerdo a la columna order, cuando duerman por lo menos 10 (use el operador pipe).
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, desc(sleep_total)) %>%
filter(sleep_total >= 10)
#Agregar una columna al data frame con la proporcion de sleep_rem del total sleep_total.
msleep %>%
mutate(rem_proportion = sleep_rem / sleep_total) %>%
head
#Agregar una columna con el peso en gramos
msleep %>%
mutate(rem_proportion = sleep_rem / sleep_total,
bodywt_grams = bodywt * 1000) %>%
head
#Cual es el promedio del total de sueno?
msleep %>%
summarise(avg_sleep = mean(sleep_total))
#Halle el promedio del total de sueno asi como el minimo y el maximo de los animales agrupados por orden.
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
#Muestre todos los animales que duerman en total menos de 16
filter(msleep, sleep_total < 16)
#Muestre todos los primates o Perissodactyla
filter(msleep, order %in% c("Perissodactyla", "Primates"))
#Use el operador pipe en todo lo que sigue.
#Muestre las columnas name y sleep_total, solo las primeras 5 filas
msleep %>%
select(name, sleep_total) %>%
head
#Use el operador pipe en todo lo que sigue.
#Muestre las columnas name y sleep_total, solo las primeras 5 filas
msleep %>%
select(name, sleep_total) %>%
head(5)
#Ordene por la columna “order” (muestre solo los primeros 5 elementos).
msleep %>% arrange(order) %>% head(5)
#Ordene por columna sleep_total
msleep %>% arrange(sleep_total)
#Cual es el animal que duerme menos?: Giraffe
msleep %>% arrange(sleep_total) %>% head(1)
#Cual es el animal que duerme mas?: Little brown bat
msleep %>% arrange(sleep_total) %>% tail(1)
#Muestre las columnas name, order, sleep_total ordenadas en forma descendente de acuerdo a la columna order, cuando duerman por lo menos 10 (use el operador pipe).
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, desc(sleep_total)) %>%
filter(sleep_total >= 10)
#Agregar una columna al data frame con la proporcion de sleep_rem del total sleep_total.
msleep %>%
mutate(rem_proportion = sleep_rem / sleep_total) %>%
head
#Cual es el promedio del total de sueno?
msleep %>%
summarise(avg_sleep = mean(sleep_total))
#Halle el promedio del total de sueno asi como el minimo y el maximo de los animales agrupados por orden.
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
#Halle el promedio del total de sueno asi como el minimo y el maximo de los animales agrupados por orden.
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n()) %>%
arrange(avg_sleep)
#Que orden es el que duerme mas en promedio?
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n()) %>%
arrange(avg_sleep) %>% tail(1)
#El que duerme menos?
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n()) %>%
arrange(avg_sleep) %>% head(1)
#Grafique sleep_total contra cada una de las demas variables, muestre cada uno de los ordenes en diferente color (use ggplot).
ggplot(msleep)
#Encuentre que tan fuerte es la relacion lineal entre sleep_total y cada una de las demas variable. Ordene las variable de acuerdo a este valor.
ggplot(msleep, aes(x = bodywt, y = sleep_total))
#Grafique sleep_total contra cada una de las demas variables, muestre cada uno de los ordenes en diferente color (use ggplot).
msleep
#Encuentre que tan fuerte es la relacion lineal entre sleep_total y cada una de las demas variable. Ordene las variable de acuerdo a este valor.
ggplot(msleep, aes(x = bodywt, y = sleep_total))
#Encuentre que tan fuerte es la relacion lineal entre sleep_total y cada una de las demas variable. Ordene las variable de acuerdo a este valor.
ggplot(msleep, aes(x = bodywt, y = sleep_total)) + + geom_point()
#Encuentre que tan fuerte es la relacion lineal entre sleep_total y cada una de las demas variable. Ordene las variable de acuerdo a este valor.
ggplot(msleep, aes(x = bodywt, y = sleep_total)) + geom_point()
ggplot(msleep) + geom_point()
ggplot(msleep, aes(x = bodywt, y = sleep_total)) + geom_point()
#Encuentre que tan fuerte es la relacion lineal entre sleep_total y cada una de las demas variable. Ordene las variable de acuerdo a este valor.
sleepcat = ggplot(msleep, aes(x = vore, y = sleep_total, color = conservation))
sleepcat + geom_point()
#Cual es el promedio del total de sueno?
msleep %>%
summarise(avg_sleep = mean(sleep_total))
#Halle el promedio del total de sueno asi como el minimo y el maximo de los animales agrupados por orden.
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n()) %>%
arrange(avg_sleep)
#Halle el promedio del total de sueno asi como el minimo y el maximo de los animales agrupados por orden.
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total)
total = n()) %>%
arrange(avg_sleep)
#Halle el promedio del total de sueno asi como el minimo y el maximo de los animales agrupados por orden.
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n()) %>%
arrange(avg_sleep)
#Que animales se acercan mas a ese promedio?
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
total = n())
#Que animales se acercan mas a ese promedio?
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
total = n()) %>%
select(avg_sleep = 10)
#Que animales se acercan mas a ese promedio?
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
total = n()) %>%
filter(avg_sleep = 10)
#Que animales se acercan mas a ese promedio?
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
total = n()) %>%
filter(avg_sleep == 10)
#Que animales se acercan mas a ese promedio?
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
total = n()) %>%
filter(avg_sleep == 10)
#Que animales se acercan mas a ese promedio?
msleep %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n()) %>%
arrange(avg_sleep)
group_by(order)
#Que animales se acercan mas a ese promedio?
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n()) %>%
arrange(avg_sleep)
