# Does the needle cross a line?
#
x <= l / 2 * sin(theta)
}
L = 1
T = 2
#
N = 100
#
cross = replicate(N, buffon(L, T))
library(dplyr)
#
estimates = data.frame(
n = 1:N,
pi = 2 * L / T / cumsum(cross) * (1:N)
) %>% subset(is.finite(pi))
estimates
View(estimates)
a <- 1 # length of needle
L <- 1 # distance between lines
n <- 100 # number of dropped needles
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
pi.est
pi.est <- (n*2)/(hit)
pi.est
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
pi.est
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
pi.est
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
pi.est
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
pi.est
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
pi.est <- (n*2)/(hit)
pi.est
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
a <- 1 # length of needle
L <- 1 # distance between lines
n <- 100 # number of dropped needles
buffon_experiment <- function(n, L, a) {
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
}
B = buffon_experiment(n, L, a)
print("# touching or crossing a line")
B
print("# not touching a line")
print(n-B)
L <- 1 # length of needle
x <- 1 # distance between lines
n <- 100 # number of dropped needles
buffon_experiment <- function(n, L, a) {
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
}
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B
print("# not touching a line:")
print(n-B)
print("Pi estimation:")
pi.est <- (n*2)/(hit)
pi.est
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B
print("# not touching a line:")
print(n-B)
print("Pi estimation:")
pi.est <- (n*2)/(hit)
pi.est
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B
print("# not touching a line:")
print(n-B)
print("Pi estimation:")
pi.est <- (n*2)/(B)
pi.est
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B
print("# not touching a line:")
print(n-B)
print("Pi estimation:")
pi.est <- (n*2)/(B)
pi.est
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B
print("# not touching a line:")
print(n-B)
print("Pi estimation:")
pi.est <- (n*2)/(B)
pi.est
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
print("# not touching a line:")
print(n-B)
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
L <- 1 # length of needle
x <- 1 # distance between lines
n <- 100 # number of dropped needles
buffon_experiment <- function(n, L, a) {
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
}
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
n <- 10000 # number of dropped needles
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
library("ggplot")
library(tidyverse)
library(ggplot2)
sec <- seq(100, 500, 1000, 10000, 100000)
sec <- seq(100, 500, 1000, 10000)
sec <- seq(100, 5000, 50)
pi_aprox <- function(n){
B = buffon_experiment(n, L, a)
#print("# touching or crossing a line:")
B = B / n
B
#print("# not touching a line:")
#print(1-B)
#print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
}
pies <- lapply(sec, pi_aprox)
plot(sec, pies)
abline(h = 0, v = pi, col = "gray60")
sec <- seq(100, 5000, 50)
pi_aprox <- function(n){
B = buffon_experiment(n, L, a)
#print("# touching or crossing a line:")
B = B / n
B
#print("# not touching a line:")
#print(1-B)
#print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
}
pies <- lapply(sec, pi_aprox)
plot(sec, pies)
library(tidyverse)
library(ggplot2)
L <- 1 # length of needle
x <- 1 # distance between lines
n <- 10000 # number of dropped needles
buffon_experiment <- function(n, L, a) {
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (L/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
}
B = buffon_experiment(n, L, a)
print("# touching or crossing a line:")
B = B / n
B
L <- 1 # length of needle
x <- 1 # distance between lines
n <- 10000 # number of dropped needles
buffon_experiment <- function(n, L, a) {
hit <- 0
for(i in 1:n) {
x <- runif(1,0,1)
y <- runif(1,0,1)
while(x^2 + y^2 > 1) { # no points outside of unit circle
x <- runif(1,0,1)
y <- runif(1,0,1)
}
theta <- atan(y/x) # the random angle
d <- runif(1,0,(L/2)) # distance of needle midpoint to nearest line
if(d <= (a/2)*sin(theta)) {
hit <- hit + 1
}
}
hit
}
B = buffon_experiment(n, x, L)
print("# touching or crossing a line:")
B = B / n
B
print("# not touching a line:")
print(1-B)
print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
sec <- seq(100, 5000, 50)
pi_aprox <- function(n){
B = buffon_experiment(n, x, L)
#print("# touching or crossing a line:")
B = B / n
B
#print("# not touching a line:")
#print(1-B)
#print("Pi estimation:")
pi.est <- (2)/(B)
pi.est
}
pies <- lapply(sec, pi_aprox)
plot(sec, pies)
ensureCranPkg <- function(pkg) {
if(!suppressWarnings(requireNamespace(pkg, quietly = TRUE))) {
install.packages(pkg)
}
}
#librerias que vamos a utilizar!!!!
ensureCranPkg('devtools')
ensureCranPkg('purrr')
ensureCranPkg('dplyr')
ensureCranPkg('htmlwidgets')
ensureCranPkg('stringr')
ensureCranPkg('rvest')
ensureCranPkg('xml2')
ensureCranPkg('htmltools')
if(!suppressWarnings(requireNamespace('leaflet',quietly = TRUE)) ||
packageVersion('leaflet') < '1.0.2.9006') {
devtools::install_github('rstudio/leaflet')
}
if(!suppressWarnings(requireNamespace('tilegramsR', quietly = TRUE))) {
devtools::install_github('bhaskarvk/tilegramsR')
}
setwd("C:/Users/RaÃºl/Desktop/TSIII-Data Science/prediccionElectoral")
library(ggplot2)
#setwd("C:/Users/itzy/Desktop/Big Data/finalBigData")
encuestas <- read.csv("encuestas.csv")
dim(encuestas)
head(encuestas)
candidatos <- unique(encuestas$Ã¯..candidato)
candidatos
select <- encuestas[encuestas$Ã¯..candidato %in% candidatos, ]
select
# Grafica porcentaje de votos (encuestas) por aÃ±os dependiendo del candidato
theme_set(theme_classic())
g <- ggplot(select, aes(x=encuestas$fecha, y=encuestas$porcentaje)) +
labs(subtitle="", title="Resultados Encuestas (periÃ³dicos) para Elecciones 2018") +
labs(x = "Fecha de encuesta", y = "Porcentaje (%)") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_jitter(aes(col=Ã¯..candidato, size=porcentaje)) +
geom_smooth(aes(col=encuestas$Ã¯..candidato), method="lm", se=F) +
labs(x = "Fecha de encuesta",y = "Porcentaje (%)", color = "Candidato\n")
gridEncuestas <- ggplot(encuestas, aes(x = encuestas$fecha, y = encuestas$porcentaje, colour=encuestas$Ã¯..candidato)) +
geom_point() + facet_grid(~ encuestas$Ã¯..candidato) +
labs(x = "Fecha de encuesta", y = "Porcentaje (%)", color = "Candidato\n") +
theme(axis.text.x = element_text(angle=90, vjust=0.6))
gridEncuestas
#We have the interest to analyze, for example, AMLO data
amloData <- select[select$Ã¯..candidato == "AMLO",]
amloData
#Number of polls related to AMLO
nrow(amloData)
#We predict the next values for AMLO
prefAMLO <- data.frame(encuestas=1:nrow(amloData), porcentaje=amloData$porcentaje)
prefAMLO
ggplot(prefAMLO, aes(x=encuestas, y=porcentaje)) +
labs(subtitle="", title="PredicciÃ³n de preferencia para AMLO en las prÃ³ximas 5 encuestas", x = "NÃºmero de encuesta", y = "Porcentaje (%)") +
geom_point(color='blue') +
geom_smooth(method="lm", fullrange=T, color='darkblue') +
xlim(1, nrow(amloData) + 5)
#Linear regression using all data
select
#Current data per candidate
ggplot(select, aes(x=fecha, y=porcentaje, group=Ã¯..candidato)) +
labs(subtitle="", title="Datos al momento de preferencia por cada candidato", x = "Fecha de encuesta", y = "Porcentaje (%)", color = "Candidato\n") +
stat_smooth(aes(col=Ã¯..candidato)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#We modify the column "data" in order to predict the next values
select$fecha
#Regular expresion to substitute "."
select$fechaT <- gsub("[.]", "-", select$fecha)
select$fechaT
ggplot(select, aes(x=as.Date(fechaT), y=porcentaje, group=Ã¯..candidato)) +
labs(subtitle="Periodo previo a las elecciones", title="PredicciÃ³n de preferencia por cada candidato", x = "Periodo de encuesta", y = "Porcentaje (%)", color = "Candidato\n") +
stat_smooth(aes(col=Ã¯..candidato), method="lm",fullrange=TRUE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_bw() +
xlim(as.Date("2017-12-18"), as.Date("2018-06-29"))
